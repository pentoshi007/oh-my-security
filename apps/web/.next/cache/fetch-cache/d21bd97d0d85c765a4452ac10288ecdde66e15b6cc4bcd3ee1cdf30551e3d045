{"kind":"FETCH","data":{"headers":{"alt-svc":"h3=\":443\"; ma=86400","cf-cache-status":"DYNAMIC","cf-ray":"9645c5b23efb8aee-DEL","connection":"keep-alive","content-encoding":"gzip","content-location":"/daily_content?date=eq.2025-06-29&select=%2A","content-profile":"public","content-range":"0-0/*","content-type":"application/vnd.pgrst.object+json; charset=utf-8","date":"Thu, 24 Jul 2025 19:19:59 GMT","sb-gateway-version":"1","sb-project-ref":"pjgouvtbcjagpegszgfz","sb-request-id":"01983de0-cb69-72cc-a558-3e52948a250c","server":"cloudflare","set-cookie":"__cf_bm=C8Xj5Er94Nye1ekNcggTAtdp91eqIug450v.aefqnOY-1753384799-1.0.1.1-tEpV63ptzFpiHF3gD47AOrTsABw4WE2vCaVQ217U0Dpawjp24PzZ9ptH2DUFp5yd6ZUHxHvEkonKsghjT8BHcjkH4ugUrOVsFdPctksKmsQ; path=/; expires=Thu, 24-Jul-25 19:49:59 GMT; domain=.supabase.co; HttpOnly; Secure; SameSite=None","strict-transport-security":"max-age=31536000; includeSubDomains; preload","transfer-encoding":"chunked","vary":"Accept-Encoding","x-content-type-options":"nosniff","x-envoy-attempt-count":"1","x-envoy-upstream-service-time":"16"},"body":"","status":200,"url":"https://pjgouvtbcjagpegszgfz.supabase.co/rest/v1/daily_content?select=*&date=eq.2025-06-29"},"revalidate":31536000,"tags":[]}