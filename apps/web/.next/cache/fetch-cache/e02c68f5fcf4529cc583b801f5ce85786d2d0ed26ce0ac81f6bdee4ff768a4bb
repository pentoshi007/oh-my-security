{"kind":"FETCH","data":{"headers":{"alt-svc":"h3=\":443\"; ma=86400","cf-cache-status":"DYNAMIC","cf-ray":"9645c5b238415489-DEL","connection":"keep-alive","content-encoding":"gzip","content-location":"/daily_content?date=eq.2025-06-28&select=%2A","content-profile":"public","content-range":"0-0/*","content-type":"application/vnd.pgrst.object+json; charset=utf-8","date":"Thu, 24 Jul 2025 19:19:59 GMT","sb-gateway-version":"1","sb-project-ref":"pjgouvtbcjagpegszgfz","sb-request-id":"01983de0-cb69-7fff-9b20-2309d67ea29c","server":"cloudflare","set-cookie":"__cf_bm=EjyiaZZkDALG8SN5mT3ILHK.D5qDhTAeTMOe2nrGEiI-1753384799-1.0.1.1-2ML92ASFVc35U8hm37sOf7OYoVQ__mA6Pbzgq3WnHyyC4iLRGV3r57SxYMyTQHyDCEKGRtxqR0fnOqL4KDsuX8upIRz7ubVar6iJzrhdGtM; path=/; expires=Thu, 24-Jul-25 19:49:59 GMT; domain=.supabase.co; HttpOnly; Secure; SameSite=None","strict-transport-security":"max-age=31536000; includeSubDomains; preload","transfer-encoding":"chunked","vary":"Accept-Encoding","x-content-type-options":"nosniff","x-envoy-attempt-count":"1","x-envoy-upstream-service-time":"17"},"body":"","status":200,"url":"https://pjgouvtbcjagpegszgfz.supabase.co/rest/v1/daily_content?select=*&date=eq.2025-06-28"},"revalidate":31536000,"tags":[]}