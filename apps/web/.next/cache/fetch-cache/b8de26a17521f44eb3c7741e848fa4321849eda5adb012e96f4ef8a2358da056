{"kind":"FETCH","data":{"headers":{"alt-svc":"h3=\":443\"; ma=86400","cf-cache-status":"DYNAMIC","cf-ray":"9645c5b23b4a1b69-DEL","connection":"keep-alive","content-encoding":"gzip","content-location":"/daily_content?date=eq.2025-06-27&select=%2A","content-profile":"public","content-range":"0-0/*","content-type":"application/vnd.pgrst.object+json; charset=utf-8","date":"Thu, 24 Jul 2025 19:19:59 GMT","sb-gateway-version":"1","sb-project-ref":"pjgouvtbcjagpegszgfz","sb-request-id":"01983de0-cb69-7ea3-bee7-cc2526f58724","server":"cloudflare","set-cookie":"__cf_bm=AA5EddZ8_BPW7cDzAflpYwe7xK0M2.q3G1t2Rp.Yhx4-1753384799-1.0.1.1-2avj6LrJS6yRxdLZr.704NtmP.NnKupu34wCZlxhCL8_HOR4RUgnpzbDrJ1BQJc5J3MeFSkgcXydRozaVKpoD2x3HgE_B8pGElu851PByq0; path=/; expires=Thu, 24-Jul-25 19:49:59 GMT; domain=.supabase.co; HttpOnly; Secure; SameSite=None","strict-transport-security":"max-age=31536000; includeSubDomains; preload","transfer-encoding":"chunked","vary":"Accept-Encoding","x-content-type-options":"nosniff","x-envoy-attempt-count":"1","x-envoy-upstream-service-time":"12"},"body":"","status":200,"url":"https://pjgouvtbcjagpegszgfz.supabase.co/rest/v1/daily_content?select=*&date=eq.2025-06-27"},"revalidate":31536000,"tags":[]}